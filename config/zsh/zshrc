# Exit if not interactive shell
[[ -o interactive ]] || { echo "Not an interactive shell"; return; }

autoload -Uz compinit
compinit

autoload -Uz bracketed-paste-magic
zle -N bracketed-paste bracketed-paste-magic

# ------------------------------------ Key mappings
typeset -A KEYS
KEYS=(
  SHIFT_ENTER    '^[[13;2u'
  LEFT_ARROW     '^[OD'
  RIGHT_ARROW    '^[OC'
  CTRL_LEFT      '^[[1;5D'
  CTRL_RIGHT     '^[[1;5C'
  CTRL_TAB       '\e[9;5u'
  CTRL_SHIFT_TAB '\e[9;6u'
  CTRL_E         '^E'
  CTRL_A         '^A'
  CTRL_U         '^U'
  CTRL_J         '^J'
  CTRL_K         '^K'
  CTRL_BACKSPACE '^[[27;5;127~'
  CTRL_DELETE    '^[[3;5~'
  UP_ARROW       '^[[A'
  UP_ARROW_ALT   '^[OA'
  DOWN_ARROW     '^[[B'
  DOWN_ARROW_ALT '^[OB'
  TAB            '^I'
  SHIFT_TAB      '^[[Z'
  ESCAPE         '^['
  # CTRL_ENTER     '\x1b[13;5u'
  CTRL_ENTER_ALT 'CSI 13 ; 5 u'
  SHIFT_DELETE   '^[[3;2~'
  SHIFT_SPACE    '\x1b[32;2u'
  SHIFT_ESCAPE   '\u001b[27;2u'
  SPACE          ' '
  ENTER          '^M'
  PAGE_UP        '^[[5~'
  PAGE_DOWN      '^[[6~'
  CTRL_V         '^V'
  CTRL_W         '^W'
  CTRL_Q         '^Q'
)

# ------------------------------------ ZSH hooks
autoload -Uz add-zsh-hook

# Starship option 'add_newline = true' has weird behavior
# Use the following code instead to add a newline before the prompt

__add_newline() {
  echo ""
}

# Use the precmd hook to execute the __add_newline function just before the prompt is displayed
add-zsh-hook precmd __add_newline

# ------------------------------------ ENV variables
[ -f "$OUT/.config/shell/xdg.sh" ] && source "$OUT/.config/shell/xdg.sh"
[ -f "$OUT/.config/shell/variables.sh" ] && source "$OUT/.config/shell/variables.sh"

command -v dircolors >/dev/null 2>&1 && eval "$(dircolors -b)"

mkdir -p "$XDG_STATE_HOME/zsh"
HISTFILE="$XDG_STATE_HOME/zsh/history"
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY
export HISTORY_IGNORE="(! *)"

# source "$OUT/.config/shell/scripts/ssh-agent.sh"
# source "$OUT"/zsh-autosuggestions/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source "$OUT"/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# source "$OUT/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

# zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"
# compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"

# ------------------------------------ Word characters
autoload -U select-word-style
select-word-style bash
setopt GLOB_DOTS
KEYTIMEOUT=1

# ------------------------------------ Remove default aliases
unalias run-help 2>/dev/null
unalias which-command 2>/dev/null
unalias l 2>/dev/null
unalias ll 2>/dev/null
unalias ls 2>/dev/null

# ------------------------------------ Remove default bindings
bindkey -r "${KEYS[ESCAPE]}"
bindkey -r "${KEYS[CTRL_V]}"
bindkey -r "${KEYS[CTRL_W]}"
bindkey -r "${KEYS[CTRL_Q]}"

# ------------------------------------ Move
# bindkey "${KEYS[SHIFT_ENTER]}" accept-line
bindkey "${KEYS[LEFT_ARROW]}" backward-char
bindkey "${KEYS[RIGHT_ARROW]}" forward-char
bindkey "${KEYS[CTRL_LEFT]}" backward-word
bindkey "${KEYS[CTRL_RIGHT]}" forward-word
bindkey "${KEYS[CTRL_TAB]}" forward-word
bindkey "${KEYS[CTRL_SHIFT_TAB]}" backward-kill-word
bindkey "${KEYS[CTRL_E]}" end-of-line
bindkey "${KEYS[CTRL_A]}" beginning-of-line

# ------------------------------------ Kill
bindkey "${KEYS[CTRL_U]}" kill-buffer
bindkey "${KEYS[CTRL_J]}" backward-kill-line
bindkey "${KEYS[CTRL_K]}" kill-line
bindkey "${KEYS[CTRL_BACKSPACE]}" backward-kill-word
bindkey "${KEYS[CTRL_DELETE]}" kill-word

# ------------------------------------ Search history
bindkey "${KEYS[UP_ARROW_ALT]}" history-beginning-search-backward
bindkey "${KEYS[UP_ARROW]}" history-beginning-search-backward
bindkey "${KEYS[DOWN_ARROW]}" history-beginning-search-forward
bindkey "${KEYS[DOWN_ARROW_ALT]}" history-beginning-search-forward

# ------------------------------------ Complete
zmodload zsh/complist

zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:*:*:*:descriptions' format '%F{245}%d%f'
# shellcheck disable=SC2296
zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' list-dirs-first true
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select interactive

# bindkey -M menuselect "${KEYS[TAB]}" vi-down-line-or-history
# bindkey -M menuselect "${KEYS[SHIFT_TAB]}" vi-up-line-or-history
bindkey -M menuselect "${KEYS[TAB]}" forward-char
bindkey -M menuselect "${KEYS[SHIFT_TAB]}" backward-char
bindkey -M menuselect "${KEYS[ESCAPE]}" send-break

setopt MENU_COMPLETE
# bindkey -v '^?' backward-delete-char

# zstyle ':completion:*' menu select
# bindkey '^I' complete-word
# bindkey '^[[Z' reverse-menu-complete

# ------------------------------------ zsh-autosuggestions
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#7f7f7f"
# bindkey "${KEYS[CTRL_ENTER_ALT]}" autosuggest-execute
bindkey "${KEYS[SHIFT_ENTER]}" autosuggest-execute

# ------------------------------------ zsh-autocomplete
# zstyle ':completion:*:*:*:*:descriptions' format '%F{245}%d%f'
# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# bindkey '\t' menu-select "$terminfo[kcbt]" menu-selected
# bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete
# bindkey -M menuselect '\r' .accept-line
# bindkey -M menuselect ' ' undo

[ -f "$OUT/.config/shell/aliases.sh" ] && source "$OUT/.config/shell/aliases.sh"

# ------------------------------------ Functions
if [ -d "$OUT/.config/shell/functions" ]; then
  for file in "$OUT/.config/shell/functions"/*.sh; do
    . "$file"
  done
fi

__on_empty_buffer() {
  if [[ -n "$BUFFER" ]]; then
      eval "$2"
      return
  fi

  if eval "$1"; then
    for precmd_function in "${precmd_functions[@]}"; do
      "$precmd_function"
    done
  fi

  zle reset-prompt
}

__last_command_or_delete() { __on_empty_buffer "BUFFER=${history[$((HISTCMD-1))]}; zle accept-line" 'zle backward-delete-char'; }
zle -N __last_command_or_delete
bindkey "${KEYS[SHIFT_DELETE]}" __last_command_or_delete

__navi_or_space() { __on_empty_buffer _navi_widget; }
zle -N __navi_or_space
bindkey "${KEYS[SHIFT_SPACE]}" __navi_or_space

__ls_or_escape() { __on_empty_buffer 'echo ls; __ls'; }
# __ls_or_escape() { __on_empty_buffer 'echo; command ls --almost-all --color --width 90;' "LBUFFER+=' '; zle autosuggest-fetch"; }
zle -N __ls_or_escape
bindkey "${KEYS[ESCAPE]}" __ls_or_escape

_zsh_autosuggest_strategy_custom() {
  # suggestion=$(grep -h -m1 -E "^[^#%]*$(printf '%s' "$1" | sed 's/[]\[\^\$\.\*\{\}\(\)\\]/\\&/g')" ~/.config/navi/* | head -n 1)
  # suggestion=$(navi --query "$1" --best-match --print) # navi does not support non-interactive mode https://github.com/denisidoro/navi/issues/808
}

__aliases_() {
    local output
    output=$(aliases-fzf -f ~/terminal/config/shell/functions/leader-aliases 2>/dev/null)
    if [[ -n $output ]]; then
        if [[ $output == *$'\n' ]]; then
            BUFFER=$output
            zle accept-line
            zle reset-prompt
        else
            BUFFER=$output
            zle end-of-line
            zle autosuggest-fetch
            zle reset-prompt
        fi
    fi
}

__aliases_or_space() { __on_empty_buffer "__aliases --prefix ' ' --file $OUT/.config/shell/functions/leader-aliases" "LBUFFER+=' '; zle autosuggest-fetch"; }
# __aliases_or_space() { __aliases_; }
zle -N __aliases_or_space
bindkey "${KEYS[SPACE]}" __aliases_or_space

__aliases_or_enter() { __on_empty_buffer "__aliases --prefix '^M' --file $OUT/.config/shell/functions/leader-aliases" 'zle accept-line'; }
zle -N __aliases_or_enter
bindkey "${KEYS[ENTER]}" __aliases_or_enter

ZSH_AUTOSUGGEST_STRATEGY=(history custom completion)

compdef _cd __cd # Use the built-in cd completion for the custom cd function
compdef _cd __mkdir_cd
compdef _files __chezmoi add
compdef __cp=cp

__prevd_widget() { __prevd; zle reset-prompt; }
zle -N __prevd_widget
bindkey "${KEYS[PAGE_UP]}" __prevd_widget

__nextd_widget() { __nextd; zle reset-prompt; }
zle -N __nextd_widget
bindkey "${KEYS[PAGE_DOWN]}" __nextd_widget

# ------------------------------------ Plugins

command -v navi >/dev/null 2>&1 && eval "$(navi widget zsh)"
command -v starship >/dev/null 2>&1 && eval "$(starship init zsh)"
command -v zoxide >/dev/null 2>&1 && eval "$(zoxide init --no-cmd zsh)"
command -v direnv >/dev/null 2>&1 && eval "$(direnv hook zsh)"

if [[ ${options[zle]} = on ]]; then
  . "$(fzf-share)/completion.zsh"
  . "$(fzf-share)/key-bindings.zsh"
fi

__open_file_or_autosuggest() {
  if [[ -z "$BUFFER" ]]; then
    __open_file
  else
    # zle autosuggest-accept
    zle fzf-completion
  fi
  zle reset-prompt
}

zle -N __open_file_or_autosuggest
bindkey "${KEYS[TAB]}" __open_file_or_autosuggest

__ripgrep_or_complete() { __on_empty_buffer __ripgrep 'zle fzf-completion'; }
zle -N __ripgrep_or_complete
bindkey "${KEYS[SHIFT_TAB]}" __ripgrep_or_complete

__ls_or_shift_escape() { __on_empty_buffer 'echo ls; command ls --format=long --all --human-readable --classify --color=auto --sort=time --time-style=long-iso'; }
zle -N __ls_or_shift_escape
bindkey "${KEYS[SHIFT_ESCAPE]}" __ls_or_shift_escape

# handle_interrupt() {
#     echo ''
# }
# trap 'handle_interrupt' SIGINT
# pass show GEMINI_API_KEY > /dev/null

# __alias_or_delete() { __on_empty_buffer __run_alias "zle backward-delete-char"; }
# zle -N __alias_or_delete
# bindkey '^[[3~' __alias_or_delete

# __yazi() { __on_empty_buffer "yazi < $TTY"; }
# zle -N __yazi
# bindkey '\x1b[27;2u' __yazi

# bindkey '^[' __yazi
# bindkey '\e' __yazi

# __tmux_copy_mode() { __on_empty_buffer "tmux copy-mode > /dev/null 2>&1"; }
# zle -N __tmux_copy_mode
# bindkey '^[' __tmux_copy_mode

# __history_or_delete() { __on_empty_buffer "zle fzf-history-widget && zle accept-line" "zle backward-delete-char"; }
# zle -N __history_or_delete
# bindkey '^?' __history_or_delete
# # bindkey '^[[3;2~' __history_or_delete

# __navi_custom_or_space() { __on_empty_buffer navi "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __navi_custom_or_space
# bindkey ' ' __navi_custom_or_space

# __leader() { __on_empty_buffer __leader_widget; }
# zle -N __leader
# bindkey '^[' __leader

# __ls_or_space() { __on_empty_buffer 'command ls --almost-all --color --width 90;' "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __ls_or_space
# bindkey ' ' __ls_or_space

# __leader_or_space() { __on_empty_buffer __leader_widget "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __leader_or_space
# bindkey ' ' __leader_or_space

# __leader_or_accept() { __on_empty_buffer __leader_widget 'zle accept-line'; }
# zle -N __leader_or_accept
# bindkey '^M' __leader_or_accept

# __ls() { __on_empty_buffer 'command ls --almost-all --color --width 90;' 'zle accept-line'; }
# zle -N __ls
# bindkey '^M' __ls

# __tmux_search() { __on_empty_buffer 'tmux copy-mode; tmux command-prompt -i -p "" "send -X search-forward-incremental \"%%%\""' LBUFFER+="/"; }
# zle -N __tmux_search
# bindkey '/' __tmux_search

# __clear_or_esc() { __on_empty_buffer 'clear -x'; }
# zle -N __clear_or_esc
# bindkey '^[' __clear_or_esc

# __history_or_esc() { __on_empty_buffer "zle fzf-history-widget && zle accept-line"; }
# zle -N __history_or_esc
# bindkey '\u001B[27;2u' __history_or_esc

# __navi_or_space() { __on_empty_buffer "navi --path ~/.local/share/navi/cheats" "LBUFFER+=' '; zle autosuggest-fetch"; }
# zle -N __navi_or_space
# bindkey '\x1b[32;2u' __navi_or_space

# __yazi() { __on_empty_buffer "yazi < $TTY"; }
# zle -N __yazi
# bindkey '^[' __yazi
# bindkey '\x1b[27;2u' __yazi

# __yazi() { __on_empty_buffer "__yazi_cd < $TTY"; }
# zle -N __yazi
# bindkey '^[' __yazi

# __git_widget() { __on_empty_buffer "__aliases --prefix g --file $OUT/.config/shell/functions/git-aliases" 'LBUFFER+=g; zle reset-prompt; zle autosuggest-fetch'; }

# zle -N __git_widget
# bindkey 'g' __git_widget

